from aiogram import Bot, Dispatcher, executor
from aiogram.types import Message, ParseMode
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from gpt_requester import ask_gpt, get_gift_names
import keyboards
from states import GiftRecState
from settings import TOKEN

from markets_parser import ParserWB


HTML_PM = ParseMode.HTML

storage = MemoryStorage()
bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=storage)
parser = ParserWB()


@dp.message_handler(commands=['start', 'help'], state='*')
async def send_help(message: Message, state: FSMContext):
    help_message = '''
–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —á–∞—Ç-–±–æ—Ç Giftee team. 
–ú—ã –ø–æ–º–æ–∂–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫
'''
    await GiftRecState.start.set()
    await message.answer(help_message, reply_markup=keyboards.start_markup, parse_mode=HTML_PM)


@dp.message_handler(state=GiftRecState.start)
async def quest1(message: Message, state: FSMContext):
    text = '''
<b>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ —á–µ–ª–æ–≤–µ–∫–µ, –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –≥–æ—Ç–æ–≤–∏–º –ø–æ–¥–∞—Ä–æ–∫:</b>

1. –í–æ–∑—Ä–∞—Å—Ç –∏ –ø–æ–ª
2. –ö—Ç–æ —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –≤–∞—Å (–¥—Ä—É–≥, —á–ª–µ–Ω —Å–µ–º—å–∏, –∫–æ–ª–ª–µ–≥–∞, –≤–æ–∑–ª—é–±–ª–µ–Ω–Ω—ã–π, –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞–∫–æ–º—ã–π)

<i>–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤: "–î—Ä—É–≥, 20 –ª–µ—Ç" –∏–ª–∏ "–ë–∞–±—É—à–∫–∞, 60 –ª–µ—Ç"</i>
'''
    await GiftRecState.base_quest.set()
    await message.answer(text, reply_markup=keyboards.none, parse_mode=HTML_PM)


@dp.message_handler(state=GiftRecState.base_quest)
async def quest2(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['base_info'] = message.text

    text = '''
<b>–ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–∏–ª—É—á—à–∏–π –ø–æ–¥–∞—Ä–æ–∫, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –∑–Ω–∞–µ—Ç–µ –æ–± —ç—Ç–æ–º —á–µ–ª–æ–≤–µ–∫–µ:</b> 

1. –•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è
2. –ö–µ–º –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç?
3. –ù–∞ –∫–æ–≥–æ –æ–Ω —É—á–∏—Ç—Å—è?

<i>–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: "–•–æ–±–±–∏ - –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã. –†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º. –£—á–∏—Ç—Å—è –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–≥–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞."</i>
'''
    await GiftRecState.next()
    await message.answer(text, parse_mode=HTML_PM)
    
    
@dp.message_handler(state=GiftRecState.deep_quest)
async def quest3(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['deep_info'] = message.text

    text = '''
<b>–ö–∞–∫–æ–π —É –Ω–µ–≥–æ –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏:</b> 

1. –ê–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: –í–∫–ª—é—á–∞–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Å–ø–æ—Ä—Ç, –ø–æ—Ö–æ–¥—ã –∏ –∑–∞–±–æ—Ç—É –æ –∑–¥–æ—Ä–æ–≤—å–µ. 
2. –°–ø–æ–∫–æ–π–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —É–µ–¥–∏–Ω–µ–Ω–∏—é, —á—Ç–µ–Ω–∏—é, —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—é –∏ —Ç–∏—Ö–∏–º –∑–∞–Ω—è—Ç–∏—è–º. 
3. –†–∞–±–æ—Ç—è—â–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: –ü–æ–ª–Ω–∞—è –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–µ, –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–æ—Å—Ç—É. 
4. –≠–∫–æ-—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: –ó–∞–±–æ—Ç–∞ –æ –ø—Ä–∏—Ä–æ–¥–µ, —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, —É—Å—Ç–æ–π—á–∏–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–π 
5. –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: –õ—é–¥–∏, –ø–æ—Å–≤—è—Ç–∏–≤—à–∏–µ —Å–µ–±—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤—É, –∏—Å–∫—É—Å—Å—Ç–≤—É –∏–ª–∏ –º—É–∑—ã–∫–µ. 
6. –°–µ–º–µ–π–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: –§–æ–∫—É—Å –Ω–∞ —Å–µ–º—å–µ, –∑–∞–±–æ—Ç–∞ –æ –±–ª–∏–∑–∫–∏—Ö, –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –∫—Ä—É–≥—É —Ä–æ–¥–Ω—ã—Ö –∏ –¥—Ä—É–∑–µ–π. 
7. –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: –õ—é–¥–∏, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—â–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –Ω–æ–≤—ã–µ –∫—É–ª—å—Ç—É—Ä—ã –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è. 

<i>–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: "–ê–∫—Ç–∏–≤–Ω—ã–π"</i>
'''
    await GiftRecState.next()
    await message.answer(text, parse_mode=HTML_PM)
    
    
@dp.message_handler(state=GiftRecState.lifestyle_quest)
async def quest4(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['lifestyle_info'] = message.text

    text = '''
<b>–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –ø–æ–¥–∞—Ä–æ–∫!!!</b>

1. –ù–∞ –∫–∞–∫–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫ –ø–æ–¥–±–∏—Ä–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫ (–ù–æ–≤—ã–π –≥–æ–¥, –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, –¥—Ä.) 
2. –ö–∞–∫–æ–π —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–∞ –≤—ã –∏—â–µ—Ç–µ (–ø–æ–ª–µ–∑–Ω—ã–π, –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è)

<i>–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: "–ó–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –Ω–æ–≤—ã–π –≥–æ–¥"</i>
'''
    await GiftRecState.next()
    await message.answer(text, parse_mode=HTML_PM)
    
    
@dp.message_handler(state=GiftRecState.gift_desc)
async def quest5(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['gift_info'] = message.text

    text = '''
<b>–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ - –≤–∞—à –±—é–¥–∂–µ—Ç</b>

<i>–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: "2500"</i>
'''
    await GiftRecState.next()
    await message.answer(text, parse_mode=HTML_PM)
    
    
@dp.message_handler(state=GiftRecState.budget)
async def quest6(message: Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            data['budget_info'] = int(message.text)
        except:
            await message.answer('''
<b>–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ - –≤–∞—à –±—é–¥–∂–µ—Ç</b>

<i>–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: "2500"</i>
''', parse_mode=HTML_PM)
            return

    query = f'''
–ö–æ–º—É: {data['base_info']}
–ò–Ω—Ç–µ—Ä–µ—Å—ã: {data['deep_info']}
–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: {data['lifestyle_info']}
–¢–∏–ø –ø–æ–¥–∞—Ä–∫–∞: {data['gift_info']}
–ë—é–¥–∂–µ—Ç: {data['budget_info']}
'''

    text = f'''
<b>–û—Ç–ª–∏—á–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å:</b>
{query}
–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ "OK", –∏–Ω–∞—á–µ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ".
'''
    await GiftRecState.next()
    await message.answer(text, reply_markup=keyboards.check_markup, parse_mode=HTML_PM)
    
    
@dp.message_handler(state=GiftRecState.check)
async def quest_final(message: Message, state: FSMContext):
    msg = message.text

    if msg == 'OK':
        await message.answer('–ò—â—É –ø–æ–¥–∞—Ä–∫–∏...', reply_markup=keyboards.none, parse_mode=HTML_PM)
        
        query = { }
        async with state.proxy() as data:
            for key in ['base', 'deep', 'lifestyle', 'gift', 'budget']:
                query[key + '_info'] = data[key + '_info']

        try:
            gpt_answer = ask_gpt(query)
            gift_names = get_gift_names(gpt_answer)
            links = parser.get_links(gift_names)
            links_as_str = '\n'.join(links)
            answer = f'{gpt_answer}\n\n–ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å:\n{links_as_str}'

            await message.answer(answer, parse_mode=HTML_PM)
        except:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ üòî\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
        finally:
            await state.finish()
    else:
        await GiftRecState.start.set()
        await message.answer('–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!', reply_markup=keyboards.none, parse_mode=HTML_PM)
        await send_help(message, state)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
